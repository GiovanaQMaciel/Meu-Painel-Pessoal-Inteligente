<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Tarefas</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .musica {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            padding: 30px;
            backdrop-filter: blur(10px);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #333;
            font-size: 2.5rem;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
        }

        .input-container {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            position: relative;
        }

        .task-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e1e5e9;
            border-radius: 50px;
            font-size: 16px;
            outline: none;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

        .task-input:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .add-btn {
            padding: 15px 25px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            min-width: 120px;
        }

        .add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
        }

        .add-btn:active {
            transform: translateY(0);
        }

        .filter-container {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 25px;
        }

        .filter-btn {
            padding: 8px 20px;
            border: 2px solid #e1e5e9;
            background: white;
            border-radius: 25px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .filter-btn.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border-color: transparent;
        }

        .tasks-container {
            min-height: 200px;
        }

        .task-item {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 20px;
            background: white;
            border-radius: 15px;
            margin-bottom: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            animation: slideIn 0.3s ease;
        }

        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        .task-item.completed {
            opacity: 0.7;
            background: #f8f9fa;
        }

        .task-item.completed .task-text {
            text-decoration: line-through;
            color: #999;
        }

        .task-checkbox {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #ddd;
            cursor: pointer;
            position: relative;
            transition: all 0.3s ease;
        }

        .task-checkbox.checked {
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-color: #667eea;
        }

        .task-checkbox.checked::after {
            content: '‚úì';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 12px;
            font-weight: bold;
        }

        .task-text {
            flex: 1;
            font-size: 16px;
            color: #333;
            word-wrap: break-word;
        }

        .task-actions {
            display: flex;
            gap: 10px;
        }

        .edit-btn, .delete-btn {
            padding: 8px 12px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .edit-btn {
            background: #17a2b8;
            color: white;
        }

        .edit-btn:hover {
            background: #138496;
            transform: scale(1.05);
        }

        .delete-btn {
            background: #dc3545;
            color: white;
        }

        .delete-btn:hover {
            background: #c82333;
            transform: scale(1.05);
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #999;
        }

        .empty-state img {
            width: 100px;
            height: 100px;
            opacity: 0.3;
            margin-bottom: 20px;
        }

        .stats {
            display: flex;
            justify-content: space-between;
            padding: 20px;
            background: rgba(102, 126, 234, 0.1);
            border-radius: 15px;
            margin-top: 20px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeOut {
            from {
                opacity: 1;
                transform: scale(1);
            }
            to {
                opacity: 0;
                transform: scale(0.8);
            }
        }

        .task-item.removing {
            animation: fadeOut 0.3s ease forwards;
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 20px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .input-container {
                flex-direction: column;
            }

            .filter-container {
                flex-wrap: wrap;
            }

            .stats {
                flex-direction: column;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìù Lista de Tarefas</h1>
            <p>Organize suas atividades e seja mais produtivo!</p>
        </div>

        <div class="input-container">
            <input type="text" class="task-input" placeholder="Digite uma nova tarefa..." id="taskInput">
            <button class="add-btn" id="addBtn">Adicionar</button>
        </div>

        <div class="filter-container">
            <button class="filter-btn active" data-filter="all">Todas</button>
            <button class="filter-btn" data-filter="pending">Pendentes</button>
            <button class="filter-btn" data-filter="completed">Conclu√≠das</button>
        </div>

        <div class="tasks-container" id="tasksContainer">
            <div class="empty-state" id="emptyState">
                <div style="font-size: 4rem; margin-bottom: 20px;">üìã</div>
                <h3>Nenhuma tarefa ainda</h3>
                <p>Adicione sua primeira tarefa para come√ßar!</p>
            </div>
        </div>

        <div class="stats" id="stats" style="display: none;">
            <div class="stat-item">
                <div class="stat-number" id="totalTasks">0</div>
                <div class="stat-label">Total</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="pendingTasks">0</div>
                <div class="stat-label">Pendentes</div>
            </div>
            <div class="stat-item">
                <div class="stat-number" id="completedTasks">0</div>
                <div class="stat-label">Conclu√≠das</div>
            </div>
        </div>
    </div>

    <script>
        class TodoApp {
            constructor() {
                this.tasks = JSON.parse(localStorage.getItem('tasks')) || [];
                this.currentFilter = 'all';
                this.editingId = null;
                
                this.initializeElements();
                this.bindEvents();
                this.render();
            }

            initializeElements() {
                this.taskInput = document.getElementById('taskInput');
                this.addBtn = document.getElementById('addBtn');
                this.tasksContainer = document.getElementById('tasksContainer');
                this.emptyState = document.getElementById('emptyState');
                this.filterBtns = document.querySelectorAll('.filter-btn');
                this.stats = document.getElementById('stats');
                this.totalTasks = document.getElementById('totalTasks');
                this.pendingTasks = document.getElementById('pendingTasks');
                this.completedTasks = document.getElementById('completedTasks');
            }

            bindEvents() {
                this.addBtn.addEventListener('click', () => this.addTask());
                this.taskInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') this.addTask();
                });

                this.filterBtns.forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        this.setFilter(e.target.dataset.filter);
                    });
                });
            }

            generateId() {
                return Date.now().toString(36) + Math.random().toString(36).substr(2);
            }

            addTask() {
                const text = this.taskInput.value.trim();
                if (!text) return;

                if (this.editingId) {
                    this.updateTask(this.editingId, text);
                    this.editingId = null;
                    this.addBtn.textContent = 'Adicionar';
                } else {
                    const task = {
                        id: this.generateId(),
                        text: text,
                        completed: false,
                        createdAt: new Date().toISOString()
                    };
                    this.tasks.unshift(task);
                }

                this.taskInput.value = '';
                this.saveTasks();
                this.render();
            }

            updateTask(id, newText) {
                const task = this.tasks.find(t => t.id === id);
                if (task) {
                    task.text = newText;
                }
            }

            toggleTask(id) {
                const task = this.tasks.find(t => t.id === id);
                if (task) {
                    task.completed = !task.completed;
                    this.saveTasks();
                    this.render();
                }
            }

            deleteTask(id) {
                const taskElement = document.querySelector(`[data-id="${id}"]`);
                if (taskElement) {
                    taskElement.classList.add('removing');
                    setTimeout(() => {
                        this.tasks = this.tasks.filter(t => t.id !== id);
                        this.saveTasks();
                        this.render();
                    }, 300);
                }
            }

            editTask(id) {
                const task = this.tasks.find(t => t.id === id);
                if (task) {
                    this.taskInput.value = task.text;
                    this.taskInput.focus();
                    this.editingId = id;
                    this.addBtn.textContent = 'Atualizar';
                }
            }

            setFilter(filter) {
                this.currentFilter = filter;
                this.filterBtns.forEach(btn => {
                    btn.classList.toggle('active', btn.dataset.filter === filter);
                });
                this.render();
            }

            getFilteredTasks() {
                switch (this.currentFilter) {
                    case 'pending':
                        return this.tasks.filter(t => !t.completed);
                    case 'completed':
                        return this.tasks.filter(t => t.completed);
                    default:
                        return this.tasks;
                }
            }

            createTaskElement(task) {
                const taskElement = document.createElement('div');
                taskElement.className = `task-item ${task.completed ? 'completed' : ''}`;
                taskElement.setAttribute('data-id', task.id);

                taskElement.innerHTML = `
                    <div class="task-checkbox ${task.completed ? 'checked' : ''}" onclick="todoApp.toggleTask('${task.id}')"></div>
                    <div class="task-text">${this.escapeHtml(task.text)}</div>
                    <div class="task-actions">
                        <button class="edit-btn" onclick="todoApp.editTask('${task.id}')">‚úèÔ∏è</button>
                        <button class="delete-btn" onclick="todoApp.deleteTask('${task.id}')">üóëÔ∏è</button>
                    </div>
                `;

                return taskElement;
            }

            escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            updateStats() {
                const total = this.tasks.length;
                const completed = this.tasks.filter(t => t.completed).length;
                const pending = total - completed;

                this.totalTasks.textContent = total;
                this.pendingTasks.textContent = pending;
                this.completedTasks.textContent = completed;

                this.stats.style.display = total > 0 ? 'flex' : 'none';
            }

            render() {
                const filteredTasks = this.getFilteredTasks();
                
                // Limpar container
                this.tasksContainer.innerHTML = '';

                if (filteredTasks.length === 0) {
                    if (this.tasks.length === 0) {
                        this.tasksContainer.appendChild(this.emptyState);
                    } else {
                        const emptyFilter = document.createElement('div');
                        emptyFilter.className = 'empty-state';
                        emptyFilter.innerHTML = `
                            <div style="font-size: 4rem; margin-bottom: 20px;">üîç</div>
                            <h3>Nenhuma tarefa encontrada</h3>
                            <p>N√£o h√° tarefas ${this.currentFilter === 'pending' ? 'pendentes' : 'conclu√≠das'}</p>
                        `;
                        this.tasksContainer.appendChild(emptyFilter);
                    }
                } else {
                    filteredTasks.forEach(task => {
                        this.tasksContainer.appendChild(this.createTaskElement(task));
                    });
                }

                this.updateStats();
            }

            saveTasks() {
                localStorage.setItem('tasks', JSON.stringify(this.tasks));
            }
        }

        // Inicializar a aplica√ß√£o
        const todoApp = new TodoApp();
    </script>
</body>
</html>